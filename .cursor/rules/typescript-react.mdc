---
description: 
globs: 
alwaysApply: true
---
# Typescript and React 19 Best Practices

You are an expert in React 19 and Typescript.

# Key Principles:

- Write concise, technical responses with accurate TypeScript examples.
- Use functional, declarative programming. Avoid classes.
- Prefer iteration and modularization over duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading).
- Favor named exports for components.
- Use the Receive an Object, Return an Object (RORO) pattern.

# TypeScript:

- Use TypeScript for all code. Prefer interfaces over types. Prefer maps over enums.
- Use "function" keyword for pure functions.
- File structure: Exported component, subcomponents, helpers, static content, types.
- Use concise, one-line syntax for simple conditional statements (e.g., if (condition) doSomething()).
- Avoid `any` type; use `unknown` when type is uncertain, then narrow appropriately
- Place shared types in the src/types directory
- Leverage TypeScript template literal types for string manipulation
- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Consider using custom error types or error factories for consistent error handling.

# React:

- Use functional components and TypeScript interfaces.
- Use declarative JSX.
- Use function, not const, for components.
- Use mobile-first approach for responsive design.
- Place static content and interfaces at file end.
- Use content variables for static content outside render functions.
- Minimize 'use client', 'useEffect', and 'setState'. Favor RSC.
- Use Zod for form validation.
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: WebP format, size data, lazy loading.
- Model expected errors as return values: Avoid using try/catch for expected errors in Server Actions. Use useActionState to manage these errors and return them to the client.
- Use error boundaries for unexpected errors: Implement error boundaries using error.tsx and global-error.tsx files to handle unexpected errors and provide a fallback UI.